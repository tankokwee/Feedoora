@page "/deliverypartners/delete"
@using Microsoft.EntityFrameworkCore
@using Feedoora.Domain
@inject IDbContextFactory<Feedoora.Data.FeedooraContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>DeliveryPartner</h2>
    <hr />
    @if (deliverypartner is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Username</dt>
            <dd class="col-sm-10">@deliverypartner.Username</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Password</dt>
            <dd class="col-sm-10">@deliverypartner.Password</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PhoneNum</dt>
            <dd class="col-sm-10">@deliverypartner.PhoneNum</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@deliverypartner.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@deliverypartner.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Createdby</dt>
            <dd class="col-sm-10">@deliverypartner.Createdby</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Updatedby</dt>
            <dd class="col-sm-10">@deliverypartner.Updatedby</dd>
        </dl>
        <EditForm method="post" Model="deliverypartner" OnValidSubmit="DeleteDeliveryPartner" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(deliverypartner is null)">Delete</button> |
            <a href="/deliverypartners">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private DeliveryPartner? deliverypartner;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        deliverypartner = await context.DeliveryPartner.FirstOrDefaultAsync(m => m.Id == Id);

        if (deliverypartner is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteDeliveryPartner()
    {
        using var context = DbFactory.CreateDbContext();
        context.DeliveryPartner.Remove(deliverypartner!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/deliverypartners");
    }
}
